import 'package:promina/features/login/domain/entities/login_entity.dart';

class AutogeneratedModel extends Autogenerated
{
 const AutogeneratedModel({
    required super.info,
    required super.item,
    required super.event,
    required super.variable,
  });
  factory AutogeneratedModel.fromJson(Map<String,dynamic>json)
  {
     List<ItemModel> item = [];
     if(json['item'] != null){
       json['item'].forEach((element){
         item.add(ItemModel.fromJson(element));
       });
     }
     List<EventModel> event = [];
     if(json['event'] != null){
       json['event'].forEach((element){
         event.add(EventModel.fromJson(element));
       });
     }
     List<VariableModel> variable = [];
     if(json['variable'] != null){
       json['variable'].forEach((element){
         variable.add(VariableModel.fromJson(element));
       });
     }
    return AutogeneratedModel(
        info: json['info'] != null ? InfoModel.fromJson(json['info']) : null,
        item: item,
        event: event,
        variable: variable,
    );
  }
}

class InfoModel extends Info
{
  const InfoModel({
    required super.sPostmanId,
    required super.name,
    required super.schema,
  });
  factory InfoModel.fromJson(Map<String,dynamic>json)
  {
    return InfoModel(
        sPostmanId: json['sPostmanId'],
        name: json['name'],
        schema: json['schema'],
    );
  }
}

class ItemModel extends Item
{
 const ItemModel({
    required super.name,
    required super.id,
    required super.request,
    required super.response,
  });
 factory ItemModel.fromJson(Map<String,dynamic>json)
 {
   List<ResponseModel> response = [];
   if(json['response'] != null){
     json['response'].forEach((element)
     {
       response.add(ResponseModel.fromJson(element));
     });
   }
   return ItemModel(
       name: json['name'],
       id: json['id'],
       request: json['request'] != null? RequestModel.fromJson(json['request']) : null,
       response: response,
   );
 }
}

class RequestModel extends Request
{
  const RequestModel({
    required super.method,
    required super.header,
    required super.body,
    required super.url,
    required super.auth,
});

  factory RequestModel.fromJson(Map<String,dynamic>json)
  {
    List<Header> header = [];
    if(json['header'] != null){
      json['header'].forEach((element)
      {
        header.add(HeaderModel.fromJson(element));
      });
    }
    return RequestModel(
        method: json['method'],
        header: header,
        body: json['body'] != null ? BodyModel.fromJson(json['body']) : null,
        url: json['url'],
        auth: json['auth'] != null ? AuthModel.fromJson(json['auth']) : null,
    );
  }
}

class HeaderModel extends Header
{
 const HeaderModel({
    required super.warning,
    required super.key,
    required super.value,
    required super.type,
  });
 factory HeaderModel.fromJson(Map<String,dynamic>json)
 {
   return HeaderModel(
       warning: json['warning'],
       key: json['key'],
       value: json['value'],
       type: json['type'],
   );
 }
}

class BodyModel extends Body
{
 const BodyModel({
    required super.mode,
    required super.formdata,
  });
 factory BodyModel.fromJson(Map<String,dynamic>json)
 {
   List<FormdataModel> formdata = [];
   if(json['formdata'] != null){
     json['formdata'].forEach((element)
     {
       formdata.add(FormdataModel.fromJson(element));
     });
   }
   return BodyModel(
       mode: json['mode'],
       formdata: formdata,
   );
 }
}

class FormdataModel extends Formdata
{
 const FormdataModel({
    required super.key,
    required super.value,
    required super.type,
    required super.src,
  });
 factory FormdataModel.fromJson(Map<String,dynamic>json)
 {
   return FormdataModel(
       key: json['key'],
       value: json['value'],
       type: json['type'],
       src: json['src'],
   );
 }
}

class AuthModel extends Auth
{
 const AuthModel({
    required super.type,
    required super.bearer,
  });
 factory AuthModel.fromJson(Map<String,dynamic>json){
   return AuthModel(
       type: json['type'],
       bearer: json['bearer'] != null ? BearerModel.fromJson(json['bearer']) : null,
   );
 }
}

class BearerModel extends Bearer
{
 const BearerModel({
   required super.token,
 });
 factory BearerModel.fromJson(Map<String,dynamic>json)
 {
   return BearerModel(
       token: json['token'],
   );
 }

}

class ResponseModel extends Response
{
 const ResponseModel({
    required super.id,
    required super.name,
    required super.originalRequest,
    required super.status,
    required super.code,
    required super.sPostmanPreviewlanguage,
    required super.header,
    required super.cookie,
    required super.body,
  });
  factory ResponseModel.fromJson(Map<String,dynamic>json)
  {
    return ResponseModel(
        id: json['id'],
        name: json['name'],
        originalRequest: json['originalRequest'] != null ? OriginalRequestModel.fromJson(json['originalRequest']) : null,
        status: json['status'],
        code: json['code'],
        sPostmanPreviewlanguage: json['sPostmanPreviewlanguage'],
        header: List<dynamic>.from(json['header'].map((e) => e)),
        cookie: List<dynamic>.from(json['cookie'].map((e) => e)),
        body: json['body'],
    );
  }

}

class OriginalRequestModel extends OriginalRequest
{
 const OriginalRequestModel({
    required super.method,
    required super.header,
    required super.body,
    required super.url,
  });
  factory OriginalRequestModel.fromJson(Map<String,dynamic>json)
  {
    List<HeaderDataModel> header = [];
    if(json['HeaderDataModel'] != null){
      json['HeaderDataModel'].forEach((element)
      {
        header.add(HeaderDataModel.fromJson(element));
      });
    }
    return OriginalRequestModel(
        method: json['method'],
        header: header,
        body: json['body'] != null ? BodyModel.fromJson(json['body']) : null,
        url: json['url'],
    );
  }
}

class HeaderDataModel extends HeaderData
{
 const HeaderDataModel({
   required super.key,
   required super.value,
 });
 factory HeaderDataModel.fromJson(Map<String,dynamic>json)
 {
   return HeaderDataModel(
       key: json['key'],
       value: json['value'],
   );
 }
}

class EventModel extends Event
{
 const EventModel({
    required super.listen,
    required super.script,
  });
 factory EventModel.fromJson(Map<String,dynamic>json)
 {
   return EventModel(
       listen: json['listen'],
       script: json['script'] != null ? ScriptModel.fromJson(json['script']) : null,
   );
 }
}

class ScriptModel extends Script
{
 const ScriptModel({
    required super.id,
    required super.type,
    required super.exec,
  });
  factory ScriptModel.fromJson(Map<String,dynamic>json)
  {
    return ScriptModel(
        id: json['id'],
        type: json['type'],
        exec: List<String>.from(json['exec']),
    );
  }
}

class VariableModel extends Variable
{
 const VariableModel({
    required super.id,
    required super.key,
    required super.value,
    required super.type,
  });
 factory VariableModel.fromJson(Map<String,dynamic>json)
 {
   return VariableModel(
       id: json['id'],
       key: json['key'],
       value: json['value'],
       type: json['type'],
   );
 }

}