import 'package:equatable/equatable.dart';


class Autogenerated extends Equatable {
 final Info? info;
 final List<Item>? item;
 final List<Event>? event;
 final List<Variable>? variable;

 const Autogenerated({
   required this.info,
   required this.item,
   required this.event,
   required this.variable,
  });

  @override
  List<Object?> get props => [
    info,
    item,
    event,
    variable,
  ];
}

class Info extends Equatable {
 final String? sPostmanId;
 final String? name;
 final String? schema;

 const Info({
   required this.sPostmanId,
   required this.name,
   required this.schema,
  });

  @override
  List<Object?> get props => [
    sPostmanId,
    name,
    schema,
  ];
}

class Item extends Equatable {
  final String? name;
  final String? id;
  final Request? request;
  final List<Response>? response;

 const Item({
    required this.name,
    required this.id,
    required this.request,
    required this.response,
  });

  @override
  List<Object?> get props => [
    name,
    id,
    request,
    response,
  ];
}

class Request extends Equatable {
  final String? method;
  final List<Header>? header;
  final Body? body;
  final String? url;
  final Auth? auth;

 const Request({
   required this.method,
   required this.header,
   required this.body,
   required this.url,
   required this.auth,
  });

  @override
  List<Object?> get props => [
    method,
    header,
    body,
    url,
    auth,
  ];
}

class Header extends Equatable {
  final String? warning;
  final String? key;
  final String? value;
  final String? type;

  const Header({
    required this.warning,
    required this.key,
    required this.value,
    required this.type,
  });

  @override
  List<Object?> get props => [
        warning,
        key,
        value,
        type,
      ];
}

class Body extends Equatable {
  final String? mode;
  final List<Formdata>? formdata;

  const Body({
    required this.mode,
    required this.formdata,
  });

  @override
  List<Object?> get props => [
        mode,
        formdata,
      ];
}

class Formdata extends Equatable {
  final String? key;
  final String? value;
  final String? type;
  final String? src;

  const Formdata({
    required this.key,
    required this.value,
    required this.type,
    required this.src,
  });

  @override
  List<Object?> get props => [
        key,
        value,
        type,
        src,
      ];
}

class Auth extends Equatable {
  final String? type;
  final Bearer? bearer;

  const Auth({
    required this.type,
    required this.bearer,
  });

  @override
  List<Object?> get props => [
        type,
        bearer,
      ];
}

class Bearer extends Equatable {
  final String? token;

  const Bearer({
    required this.token,
  });

  @override
  List<Object?> get props => [
        token,
      ];
}

class Response extends Equatable {
  final String? id;
  final String? name;
  final OriginalRequest? originalRequest;
  final String? status;
  final int? code;
  final String? sPostmanPreviewlanguage;
  final List<dynamic>? header;
  final List<dynamic>? cookie;
  final String? body;

  const Response({
    required this.id,
    required this.name,
    required this.originalRequest,
    required this.status,
    required this.code,
    required this.sPostmanPreviewlanguage,
    required this.header,
    required this.cookie,
    required this.body,
  });

  @override
  List<Object?> get props => [
        id,
        name,
        originalRequest,
        status,
        code,
        sPostmanPreviewlanguage,
        header,
        cookie,
      ];
}

class OriginalRequest extends Equatable {
  final String? method;
  final List<HeaderData>? header; // خلي بالك من الايرور اللى هنا
  final Body? body;
  final String? url;

  const OriginalRequest({
    required this.method,
    required this.header,
    required this.body,
    required this.url,
  });

  @override
  List<Object?> get props => [
        method,
        header,
        body,
        url,
      ];
}

class HeaderData extends Equatable {
  final String? key;
  final String? value;

  const HeaderData({
    required this.key,
    required this.value,
  });

  @override
  List<Object?> get props => [
        key,
        value,
      ];
}

class Event extends Equatable {
  final String? listen;
  final Script? script;

  const Event({
    required this.listen,
    required this.script,
  });

  @override
  List<Object?> get props => [
        listen,
        script,
      ];
}

class Script extends Equatable {
  final String? id;
  final String? type;
  final List<String>? exec;

  const Script({
    required this.id,
    required this.type,
    required this.exec,
  });

  @override
  List<Object?> get props => [
        id,
        type,
        exec,
      ];
}

class Variable extends Equatable {
  final String? id;
  final String? key;
  final String? value;
  final String? type;

  const Variable({
    required this.id,
    required this.key,
    required this.value,
    required this.type,
  });

  @override
  List<Object?> get props => [];
}
